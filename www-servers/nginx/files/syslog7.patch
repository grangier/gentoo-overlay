diff -ruN nginx-0.7.19.org/auto/make nginx-0.7.19/auto/make
--- nginx-0.7.19.org/auto/make	2008-10-31 14:14:49.000000000 +0100
+++ nginx-0.7.19/auto/make	2008-10-31 14:15:28.000000000 +0100
@@ -13,6 +13,10 @@
 ngx_objs_dir=$NGX_OBJS$ngx_regex_dirsep
 ngx_use_pch=`echo $NGX_USE_PCH | sed -e "s/\//$ngx_regex_dirsep/g"`
 
+#SYSLOG
+if [[ "${USE_SYSLOG}" == "YES" ]]; then
+   CFLAGS="$CFLAGS -DUSE_SYSLOG"
+fi
 
 cat << END                                                     > $NGX_MAKEFILE
 
diff -ruN nginx-0.7.19.org/auto/options nginx-0.7.19/auto/options
--- nginx-0.7.19.org/auto/options	2008-10-31 14:14:49.000000000 +0100
+++ nginx-0.7.19/auto/options	2008-10-31 14:15:28.000000000 +0100
@@ -105,6 +105,8 @@
 MD5_OPT=
 MD5_ASM=NO
 
+USE_SYSLOG=NO
+
 USE_SHA1=NO
 SHA1=NONE
 SHA1_OPT=
@@ -235,6 +237,8 @@
         --with-md5-opt=*)                MD5_OPT="$value"           ;;
         --with-md5-asm)                  MD5_ASM=YES                ;;
 
+	--with-syslog)			 USE_SYSLOG=YES		    ;;
+
         --with-sha1=*)                   SHA1="$value"              ;;
         --with-sha1-opt=*)               SHA1_OPT="$value"          ;;
         --with-sha1-asm)                 SHA1_ASM=YES               ;;
@@ -355,6 +359,8 @@
   --with-md5-opt=OPTIONS             set additional options for md5 building
   --with-md5-asm                     use md5 assembler sources
 
+  --with-syslog			     use syslog instead of files to log messages
+
   --with-sha1=DIR                    set path to sha1 library sources
   --with-sha1-opt=OPTIONS            set additional options for sha1 building
   --with-sha1-asm                    use sha1 assembler sources
diff -ruN nginx-0.7.19.org/auto/summary nginx-0.7.19/auto/summary
--- nginx-0.7.19.org/auto/summary	2008-10-31 14:14:49.000000000 +0100
+++ nginx-0.7.19/auto/summary	2008-10-31 14:15:28.000000000 +0100
@@ -71,6 +71,11 @@
     *)     echo "  + using zlib library: $ZLIB" ;;
 esac
 
+case $USE_SYSLOG in
+    YES)   echo "  + using syslog" ;;
+    *)     echo "  + syslog is not used" ;;
+esac
+
 echo
 
 
diff -ruN nginx-0.7.19.org/src/core/nginx.c nginx-0.7.19/src/core/nginx.c
--- nginx-0.7.19.org/src/core/nginx.c	2008-10-31 14:14:49.000000000 +0100
+++ nginx-0.7.19/src/core/nginx.c	2008-10-31 14:15:28.000000000 +0100
@@ -8,6 +8,9 @@
 #include <ngx_core.h>
 #include <nginx.h>
 
+#ifdef USE_SYSLOG
+#include <syslog.h>
+#endif
 
 static ngx_int_t ngx_add_inherited_sockets(ngx_cycle_t *cycle);
 static ngx_int_t ngx_getopt(ngx_cycle_t *cycle, int argc, char *const *argv);
@@ -220,6 +223,11 @@
     ngx_ssl_init(log);
 #endif
 
+    /* SYSLOG SUPPORT */
+#ifdef USE_SYSLOG
+    openlog("nginx", LOG_ODELAY, LOG_LOCAL5);
+#endif
+
     /* init_cycle->log is required for signal handlers and ngx_getopt() */
 
     ngx_memzero(&init_cycle, sizeof(ngx_cycle_t));
@@ -357,6 +365,10 @@
         ngx_single_process_cycle(cycle);
     }
 
+#ifdef USE_SYSLOG
+    closelog();
+#endif
+
     return 0;
 }
 
diff -ruN nginx-0.7.19.org/src/core/ngx_conf_file.c nginx-0.7.19/src/core/ngx_conf_file.c
--- nginx-0.7.19.org/src/core/ngx_conf_file.c	2008-10-31 14:14:49.000000000 +0100
+++ nginx-0.7.19/src/core/ngx_conf_file.c	2008-10-31 14:15:28.000000000 +0100
@@ -857,6 +857,11 @@
     full.data = NULL;
 #endif
 
+#ifdef USE_SYSLOG
+if (name) {
+		name = NULL;
+}
+#endif
     if (name) {
         full = *name;
 
diff -ruN nginx-0.7.19.org/src/core/ngx_log.c nginx-0.7.19/src/core/ngx_log.c
--- nginx-0.7.19.org/src/core/ngx_log.c	2008-10-31 14:14:49.000000000 +0100
+++ nginx-0.7.19/src/core/ngx_log.c	2008-10-31 14:15:28.000000000 +0100
@@ -7,6 +7,9 @@
 #include <ngx_config.h>
 #include <ngx_core.h>
 
+#ifdef USE_SYSLOG
+#include <syslog.h>
+#endif
 
 static char *ngx_set_error_log(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
 
@@ -81,16 +84,22 @@
 #endif
     u_char   errstr[NGX_MAX_ERROR_STR], *p, *last;
 
+#ifndef USE_SYSLOG
     if (log->file->fd == NGX_INVALID_FILE) {
         return;
     }
+#endif
 
     last = errstr + NGX_MAX_ERROR_STR;
 
+#ifdef USE_SYSLOG
+    p = errstr;
+#else
     ngx_memcpy(errstr, ngx_cached_err_log_time.data,
                ngx_cached_err_log_time.len);
 
     p = errstr + ngx_cached_err_log_time.len;
+#endif
 
     p = ngx_snprintf(p, last - p, " [%s] ", err_levels[level]);
 
@@ -158,7 +167,22 @@
 
     ngx_linefeed(p);
 
-    ngx_write_fd(log->file->fd, errstr, p - errstr);
+#ifdef USE_SYSLOG
+    /* allocate a string which can hold the error message */
+    char *syslogstr;
+
+    if ((syslogstr = calloc((p - errstr + 1), sizeof(char))) != NULL)
+    {
+        strncpy(syslogstr, (char *) errstr, p - errstr);
+
+	/* write to syslog */
+        syslog(LOG_CRIT, "%s", syslogstr);
+
+        free(syslogstr);
+    }
+#else
+        ngx_write_fd(log->file->fd, errstr, p - errstr);
+#endif
 }
 
 
@@ -242,6 +266,9 @@
     ngx_log_t  *log;
     ngx_str_t  *value, *name;
 
+#ifdef USE_SYSLOG
+    name = value = NULL;
+#else
     if (args) {
         value = args->elts;
         name = &value[1];
@@ -249,6 +276,7 @@
     } else {
         name = NULL;
     }
+#endif
 
     log = ngx_pcalloc(cycle->pool, sizeof(ngx_log_t));
     if (log == NULL) {
diff -ruN nginx-0.7.19.org/src/http/modules/ngx_http_log_module.c nginx-0.7.19/src/http/modules/ngx_http_log_module.c
--- nginx-0.7.19.org/src/http/modules/ngx_http_log_module.c	2008-10-31 14:14:49.000000000 +0100
+++ nginx-0.7.19/src/http/modules/ngx_http_log_module.c	2008-10-31 14:32:21.000000000 +0100
@@ -8,6 +8,9 @@
 #include <ngx_core.h>
 #include <ngx_http.h>
 
+#ifdef USE_SYSLOG
+#include <syslog.h>
+#endif
 
 typedef struct ngx_http_log_op_s  ngx_http_log_op_t;
 
@@ -178,9 +181,9 @@
     NGX_MODULE_V1_PADDING
 };
 
-
+#ifndef USE_SYSLOG
 static ngx_str_t  ngx_http_access_log = ngx_string(NGX_HTTP_LOG_PATH);
-
+#endif
 
 static ngx_str_t  ngx_http_combined_fmt =
     ngx_string("$remote_addr - $remote_user [$time_local] "
@@ -310,6 +313,20 @@
 ngx_http_log_write(ngx_http_request_t *r, ngx_http_log_t *log, u_char *buf,
     size_t len)
 {
+#ifdef USE_SYSLOG
+    /* allocate a string which can hold the error message */
+    char *syslogstr;
+
+    if ((syslogstr = calloc((len + 1), sizeof(char))) != NULL)
+    {
+        strncpy(syslogstr, (char *) buf, len);
+
+        /* write to syslog */
+        syslog(LOG_NOTICE, "%s", syslogstr);
+
+        free(syslogstr);
+    }
+#else
     u_char     *name;
     time_t      now;
     ssize_t     n;
@@ -354,6 +371,7 @@
 
         log->error_log_time = now;
     }
+#endif 
 }
 
 
@@ -797,8 +815,11 @@
     if (log == NULL) {
         return NGX_CONF_ERROR;
     }
-
+#ifdef USE_SYSLOG
+	log->file = ngx_conf_open_file(cf->cycle, NULL);
+#else
     log->file = ngx_conf_open_file(cf->cycle, &ngx_http_access_log);
+#endif
     if (log->file == NULL) {
         return NGX_CONF_ERROR;
     }
@@ -857,7 +878,11 @@
     n = ngx_http_script_variables_count(&value[1]);
 
     if (n == 0) {
+#ifdef USE_SYSLOG
+        log->file = ngx_conf_open_file(cf->cycle, NULL);
+#else
         log->file = ngx_conf_open_file(cf->cycle, &value[1]);
+#endif
         if (log->file == NULL) {
             return NGX_CONF_ERROR;
         }
@@ -866,8 +891,11 @@
         if (ngx_conf_full_name(cf->cycle, &value[1], 0) == NGX_ERROR) {
             return NGX_CONF_ERROR;
         }
-
+#ifdef USE_SYSLOG
+        log->file = ngx_conf_open_file(cf->cycle, NULL);
+#else
         log->script = ngx_pcalloc(cf->pool, sizeof(ngx_http_log_script_t));
+#endif
         if (log->script == NULL) {
             return NGX_CONF_ERROR;
         }
@@ -1338,3 +1366,4 @@
 
     return NGX_OK;
 }
+
